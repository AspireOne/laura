
# 2024-06-11 02:30:11.616527
+This is a NestJS project. Create a cron job boilerplate files with all required code, so that I will be ready to add my own cron jobs 

# 2024-06-11 02:30:34.084564
+/add app.mod

# 2024-06-11 02:30:50.939255
+/add src/app.module.ts

# 2024-06-11 02:33:59.277158
+Alright. So now if I want to create multiple cron jobs, running different code at different times, how should I structure it? Where should I create my cron job files, and where should I put the logic?

# 2024-06-11 02:42:28.612337
+/drop

# 2024-06-11 02:42:29.606418
+/clear

# 2024-06-11 02:43:02.729775
+/add src\providers\database.provider.ts

# 2024-06-11 02:43:54.569437
+/add src\common\env.ts 

# 2024-06-11 02:45:12.956371
+Create an OpenAI provider like this: 

# 2024-06-11 02:45:26.851094
+/undo

# 2024-06-11 02:45:37.668042
+Create an openai provider like this: const openai = new OpenAI({
+  apiKey: env.OPENROUTER_API_KEY,
+  baseURL: "https://openrouter.ai/api/v1",
+  defaultHeaders: {
+    "HTTP-Referer": "https://laura.matejpesl.cz/",
+  },
+})

# 2024-06-11 02:46:43.033154
+/add src\cron\cron.service.ts

# 2024-06-11 02:46:53.511985
+how would I then use it in e.g. cron.service.ts?

# 2024-06-11 02:52:23.684211
+/drop

# 2024-06-11 02:52:25.532738
+/clear

# 2024-06-11 02:52:26.318170
+cls

# 2024-06-11 02:52:31.555539
+/clear

# 2024-06-11 02:52:40.074081
+/git

# 2024-06-11 02:52:46.894738
+/clear

# 2024-06-11 02:52:47.699848
+/drop

# 2024-06-11 02:54:20.108235
+I will have cron jobs defined at src\cron\name.service.ts. However, I need someplace to store the logic. In a NestJS application like this, where should I put there larger chunks of code? If I was using the usual module/controller/service structure, I would put it in service, however this is different, since this is not some endpoint - this is very different.

# 2024-06-11 02:57:26.410985
+Alright. I have one more questions about conventions I guess - when I have a resource with multiple names (e.g. post likes), shoud it be post_likes (e.g. post_likes.controller.ts, post_lies.module.ts) or postLikes?

# 2024-06-11 02:57:40.283413
+/clear

# 2024-06-11 02:57:40.945326
+/drop

# 2024-06-11 03:18:00.624242
+/clear

# 2024-06-11 03:18:15.022002
+/add src\common\env.ts

# 2024-06-11 03:18:17.791839
+/add .env

# 2024-06-11 03:19:02.260410
+Add an API_KEY env key

# 2024-06-11 03:19:46.634169
+edit just the src\common\env.ts file, not the .env file

# 2024-06-11 03:20:05.357039
+/undo

# 2024-06-11 03:22:22.328937
+/drop

# 2024-06-11 03:22:23.154612
+/clear

# 2024-06-11 03:22:35.325579
+/add migrations\20240610T234551-add-fucks-given-table.ts

# 2024-06-11 03:23:09.489429
+/drop

# 2024-06-11 03:23:10.377195
+/clear

# 2024-06-11 03:31:31.544114
+In this NestJS app, create a guard that will PROPERLY check in each request if the request containts an api key.

# 2024-06-11 03:31:45.809380
+/add src\app.module.ts

# 2024-06-11 03:34:12.736731
+/add migrations\20240611T012325-add-api-keys-table.ts

# 2024-06-11 03:34:51.087349
+Based on the api keys table migration, alter the auth guard so that it properly fetches api keys and checks the validity

# 2024-06-11 03:38:35.468044
+Isn't that solution a little slow? Can you recommend me any improvement (e.g. caching, storing it somewhere else than db etc.)?

# 2024-06-11 03:39:06.303224
+/undo
